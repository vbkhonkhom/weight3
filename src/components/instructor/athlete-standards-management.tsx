"use client";

import { useEffect, useMemo, useState } from "react";
import useSWR from "swr";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { 
  ArrowLeft, 
  Trophy, 
  HelpCircle,
  Plus,
} from "lucide-react";
import { ControlledHelpDialog, HelpSection, HelpSteps, HelpList, HelpWarning, HelpTip } from "@/components/ui/help-dialog";
import { downloadCsv } from "@/lib/utils";
import { useSession } from "@/providers/session-provider";
import { useToast } from "@/providers/toast-provider";
import { api } from "@/lib/api";
import type { StandardRow, TestType } from "@/lib/types";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

interface AthleteStandardsManagementProps {
  onBack?: () => void;
  showBackButton?: boolean;
}

const TEST_TYPE_DETAILS: Record<
  TestType,
  { label: string; unit: string; description: string }
> = {
  bmi: {
    label: "BMI",
    unit: "kg/m¬≤",
    description: "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
  },
  sit_and_reach: {
    label: "‡∏ô‡∏±‡πà‡∏á‡∏á‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤",
    unit: "cm",
    description: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÄ‡∏≠‡πá‡∏ô‡∏£‡πâ‡∏≠‡∏¢‡∏´‡∏ß‡∏≤‡∏¢",
  },
  hand_grip: {
    label: "‡πÅ‡∏£‡∏á‡∏ö‡∏µ‡∏ö‡∏°‡∏∑‡∏≠",
    unit: "kg",
    description: "‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏ö‡∏µ‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡πÅ‡∏Ç‡∏ô",
  },
  chair_stand: {
    label: "‡∏•‡∏∏‡∏Å‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ",
    unit: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    description: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏∏‡∏Å-‡∏ô‡∏±‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
  },
  step_up: {
    label: "‡∏Å‡πâ‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÅ‡∏ó‡πà‡∏ô",
    unit: "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
    description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏´‡∏•‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Step Test",
  },
};

function getCategoryStyle(category: string) {
  const normalized = category.toLowerCase();
  if (normalized.includes("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥") || normalized.includes("‡∏™‡∏°‡∏™‡πà‡∏ß‡∏ô")) {
    return "bg-blue-100 text-blue-700 border-blue-200";
  }
  if (normalized.includes("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô") || normalized.includes("‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏≠‡πâ‡∏ß‡∏ô")) {
    return "bg-amber-100 text-amber-700 border-amber-200";
  }
  if (normalized.includes("‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô") || normalized.includes("‡∏≠‡πâ‡∏ß‡∏ô")) {
    return "bg-rose-100 text-rose-700 border-rose-200";
  }
  if (normalized.includes("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πà‡∏≥")) {
    return "bg-orange-100 text-orange-700 border-orange-200";
  }
  if (normalized.includes("‡∏¢‡∏≠‡∏î") || normalized.includes("‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°")) {
    return "bg-emerald-100 text-emerald-700 border-emerald-200";
  }
  if (normalized.includes("‡∏î‡∏µ")) {
    return "bg-blue-100 text-blue-700 border-blue-200";
  }
  if (normalized.includes("‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á") || normalized.includes("‡∏û‡∏≠‡πÉ‡∏ä‡πâ")) {
    return "bg-amber-100 text-amber-700 border-amber-200";
  }
  if (normalized.includes("‡∏ï‡πà‡∏≥") || normalized.includes("‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")) {
    return "bg-orange-100 text-orange-700 border-orange-200";
  }
  if (normalized.includes("‡∏ï‡πâ‡∏≠‡∏á") || normalized.includes("‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")) {
    return "bg-rose-100 text-rose-700 border-rose-200";
  }
  return "bg-slate-100 text-slate-700 border-slate-200";
}

function formatRange(row: StandardRow, unit: string) {
  const { minValue, maxValue, comparison } = row;
  if (minValue != null && maxValue != null) {
    if (minValue === maxValue) {
      return `${minValue} ${unit}`.trim();
    }
    return `${minValue} - ${maxValue} ${unit}`.trim();
  }

  if (minValue != null) {
    return comparison === "threshold"
      ? `‚â• ${minValue} ${unit}`.trim()
      : `${minValue}+ ${unit}`.trim();
  }

  if (maxValue != null) {
    return comparison === "threshold"
      ? `‚â§ ${maxValue} ${unit}`.trim()
      : `0 - ${maxValue} ${unit}`.trim();
  }

  return `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`;
}

function genderLabel(gender: "male" | "female") {
  return gender === "male" ? "‡∏ä‡∏≤‡∏¢" : "‡∏´‡∏ç‡∏¥‡∏á";
}

const HelpContent = (
  <>
    <HelpSection title="üèÜ ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?">
      <p className="text-muted-foreground mb-3">
        ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà<strong>‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤</strong>‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ 
        ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
      </p>
      <div className="p-3 bg-amber-50 border border-amber-200 rounded-lg">
        <p className="text-sm"><strong>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á:</strong></p>
        <div className="mt-2 space-y-1 text-sm text-muted-foreground">
          <p>‚Ä¢ <strong>‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:</strong> BMI 20-25 = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"</p>
          <p>‚Ä¢ <strong>‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤:</strong> BMI 20-23 = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°" (‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏Ñ‡∏ö‡∏Å‡∏ß‡πà‡∏≤)</p>
        </div>
      </div>
    </HelpSection>

    <HelpSection title="üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Å‡∏ì‡∏ë‡πå">
      <HelpSteps steps={[
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (BMI, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡∏Ø‡∏•‡∏Ø)",
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏® (‡∏ä‡∏≤‡∏¢/‡∏´‡∏ç‡∏¥‡∏á) - ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏û‡∏®‡∏°‡∏µ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô",
        "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
        "‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Min/Max ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
        "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á'"
      ]} />
      <HelpWarning>
        ‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ!
      </HelpWarning>
    </HelpSection>

    <HelpSection title="üéØ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤">
      <HelpList items={[
        "‡∏Ñ‡πà‡∏≤ Min/Max ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö (‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°, ‡∏î‡∏µ, ‡∏û‡∏≠‡πÉ‡∏ä‡πâ)",
        "‡∏£‡∏∞‡∏î‡∏±‡∏ö '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°' ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÄ‡∏ä‡πà‡∏ô BMI 20-23)",
        "‡∏£‡∏∞‡∏î‡∏±‡∏ö '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á' ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î",
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ 10-20%",
        "‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Å‡∏µ‡∏¨‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏°‡∏û‡∏•‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á"
      ]} />
    </HelpSection>

    <HelpSection title="‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á">
      <HelpList items={[
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏à‡∏∞‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
        "‡∏Ñ‡∏ß‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå",
        "‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
        "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 1-2 ‡∏Ñ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"
      ]} />
    </HelpSection>

    <HelpSection title="üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö">
      <HelpList items={[
        "‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
        "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏û‡∏®‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤",
        "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (gap) ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö",
        "‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å"
      ]} />
    </HelpSection>
  </>
);

export function AthleteStandardsManagement({ onBack, showBackButton = true }: AthleteStandardsManagementProps) {
  const { session } = useSession();
  const toast = useToast();
  const [selectedTestType, setSelectedTestType] = useState<TestType>("bmi");
  const [selectedGender, setSelectedGender] = useState<"male" | "female">("male");
  // ‡πÉ‡∏ä‡πâ audience='athlete' ‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô cache ‡∏õ‡∏ô‡∏Å‡∏±‡∏ö general
  const swrKey = session?.token ? ["standards", "athlete", session.token] : null;
  const { data: standardsData, isLoading, error, mutate } = useSWR(
    swrKey,
    // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (backend ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà fallback ‡πÅ‡∏•‡πâ‡∏ß)
    async ([, , token]) => api.listStandards(token, "athlete"),
    { revalidateOnFocus: false, revalidateOnReconnect: false },
  );
  const [standards, setStandards] = useState<StandardRow[]>([]);
  useEffect(() => {
    if (standardsData) setStandards(standardsData);
  }, [standardsData]);
  const [helpDialogOpen, setHelpDialogOpen] = useState(false);
  const [editOpen, setEditOpen] = useState(false);
  const [deleteOpen, setDeleteOpen] = useState(false);
  const [selectedRow, setSelectedRow] = useState<StandardRow | null>(null);
  const [formState, setFormState] = useState<{
    category: string;
    minValue: string;
    maxValue: string;
  }>({
    category: "",
    minValue: "",
    maxValue: "",
  });
  const [addOpen, setAddOpen] = useState(false);
  const [addForm, setAddForm] = useState<{
    testType: TestType;
    gender: "male" | "female";
    ageMin: string;
    ageMax: string;
    category: string;
    comparison: "range" | "threshold";
    minValue: string;
    maxValue: string;
  }>({
    testType: selectedTestType,
    gender: selectedGender,
    ageMin: "15",
    ageMax: "25",
    category: "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°",
    comparison: "range",
    minValue: "",
    maxValue: "",
  });

  const filteredStandards = useMemo(
    () =>
      standards.filter(
        (s) => s.testType === selectedTestType && s.gender === selectedGender,
      ),
    [standards, selectedTestType, selectedGender],
  );

  // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const handleEdit = (row: StandardRow) => {
    setSelectedRow(row);
    setFormState({
      category: row.category,
      minValue: row.minValue?.toString() ?? "",
      maxValue: row.maxValue?.toString() ?? "",
    });
    setEditOpen(true);
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏á backend ‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö audience = 'athlete'
  const handleEditSubmit = async () => {
    if (!session?.token || !selectedRow) return;
    const minValue = formState.minValue.trim() === "" ? null : parseFloat(formState.minValue);
    const maxValue = formState.maxValue.trim() === "" ? null : parseFloat(formState.maxValue);
    
    if ((formState.minValue && isNaN(minValue!)) || (formState.maxValue && isNaN(maxValue!))) {
      toast.error("‡∏Ñ‡πà‡∏≤ Min/Max ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç");
      return;
    }

    try {
      await api.updateStandard(session.token, {
        id: selectedRow.id,
        testType: selectedRow.testType,
        gender: selectedRow.gender,
        ageMin: selectedRow.ageMin,
        ageMax: selectedRow.ageMax,
        category: formState.category.trim() || selectedRow.category,
        minValue,
        maxValue,
        comparison: selectedRow.comparison,
        audience: selectedRow.audience ?? "athlete",
      });
      await mutate(async () => api.listStandards(session.token, "athlete"), { revalidate: false });
      toast.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      setEditOpen(false);
      setSelectedRow(null);
    } catch (err) {
      toast.error(err instanceof Error ? err.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ");
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  const handleDeleteClick = (row: StandardRow) => {
    setSelectedRow(row);
    setDeleteOpen(true);
  };

  // ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤)
  const handleDeleteConfirm = async () => {
    if (!session?.token || !selectedRow) return;
    try {
      await api.deleteStandard(session.token, selectedRow.id);
      await mutate(async () => api.listStandards(session.token, "athlete"), { revalidate: false });
      toast.success("‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      setDeleteOpen(false);
      setSelectedRow(null);
    } catch (err) {
      toast.error(err instanceof Error ? err.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ");
    }
  };

  const handleAddSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!session?.token) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå");
      return;
    }
    const ageMin = Number(addForm.ageMin);
    const ageMax = Number(addForm.ageMax);
    if (Number.isNaN(ageMin) || Number.isNaN(ageMax) || ageMin > ageMax) {
      toast.error("‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }
    const minValue = addForm.minValue.trim() === "" ? null : Number(addForm.minValue);
    const maxValue = addForm.maxValue.trim() === "" ? null : Number(addForm.maxValue);
    if ((addForm.minValue && Number.isNaN(minValue)) || (addForm.maxValue && Number.isNaN(maxValue))) {
      toast.error("‡∏Ñ‡πà‡∏≤ Min/Max ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç");
      return;
    }
    try {
      await api.createStandard(session.token, {
        testType: addForm.testType,
        gender: addForm.gender,
        ageMin,
        ageMax,
        category: addForm.category.trim() || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        minValue,
        maxValue,
        comparison: addForm.comparison,
        audience: "athlete",
      });
      await mutate(async () => api.listStandards(session.token, "athlete"), { revalidate: false });
      toast.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setAddOpen(false);
    } catch (err) {
      toast.error(err instanceof Error ? err.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÑ‡∏î‡πâ");
    }
  };

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          {showBackButton && onBack && (
            <Button variant="ghost" onClick={onBack}>
              <ArrowLeft className="mr-2 h-4 w-4" />
              ‡∏Å‡∏•‡∏±‡∏ö
            </Button>
          )}
          <Trophy className="h-8 w-8 text-amber-600" />
          <div>
            <h1 className="text-2xl font-semibold text-primary">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤</h1>
            <p className="text-sm text-muted">
              ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤ (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
            </p>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setHelpDialogOpen(true)}
            className="shrink-0"
            title="‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
          >
            <HelpCircle className="h-5 w-5 text-muted-foreground hover:text-primary" />
          </Button>
        </div>
        <div className="flex gap-2">
          <Button
            variant="secondary"
            onClick={() => {
              setAddForm((prev) => ({
                ...prev,
                testType: selectedTestType,
                gender: selectedGender,
              }));
              setAddOpen(true);
            }}
          >
            <Plus className="mr-2 h-4 w-4" />
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå
          </Button>
          {/* ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
          <Button
            variant="outline"
            onClick={() => {
              const csvRows = filteredStandards.map((r) => ({
                test_type: TEST_TYPE_DETAILS[r.testType].label,
                gender: genderLabel(r.gender),
                age_min: r.ageMin,
                age_max: r.ageMax,
                category: r.category,
                min_value: r.minValue ?? "",
                max_value: r.maxValue ?? "",
                comparison: r.comparison,
                audience: r.audience ?? "athlete",
              }));
              downloadCsv(
                csvRows,
                [
                  { key: "test_type", label: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö" },
                  { key: "gender", label: "‡πÄ‡∏û‡∏®" },
                  { key: "age_min", label: "‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î" },
                  { key: "age_max", label: "‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î" },
                  { key: "category", label: "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" },
                  { key: "min_value", label: "Min" },
                  { key: "max_value", label: "Max" },
                  { key: "comparison", label: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö" },
                  { key: "audience", label: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" },
                ],
                `standards-athlete-${selectedTestType}-${selectedGender}-th.csv`,
              );
            }}
            disabled={!filteredStandards.length}
          >
            ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV
          </Button>
        </div>
      </div>

      {/* Filters */}
      <Card className="rounded-3xl border border-border/60 bg-surface">
        <CardHeader>
          <CardTitle>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏®</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="test-type">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</Label>
              <Select
                id="test-type"
                value={selectedTestType}
                onChange={(e) => setSelectedTestType(e.target.value as TestType)}
              >
                {Object.entries(TEST_TYPE_DETAILS).map(([value, details]) => (
                  <option key={value} value={value}>
                    {details.label}
                  </option>
                ))}
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="gender">‡πÄ‡∏û‡∏®</Label>
              <Select
                id="gender"
                value={selectedGender}
                onChange={(e) => setSelectedGender(e.target.value as "male" | "female")}
              >
                <option value="male">‡∏ä‡∏≤‡∏¢</option>
                <option value="female">‡∏´‡∏ç‡∏¥‡∏á</option>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Standards Grid styled like /standards */}
      <Card className="rounded-3xl border border-border-strong/80 bg-surface-elevated p-6 shadow-sm">
        <div className="flex items-start justify-between gap-4">
          <div>
            <h2 className="text-lg font-semibold text-primary">
              {TEST_TYPE_DETAILS[selectedTestType].label} - {genderLabel(selectedGender)} ({filteredStandards[0]?.ageMin === filteredStandards[0]?.ageMax ? `${filteredStandards[0]?.ageMin ?? ''} ‡∏õ‡∏µ` : `${filteredStandards[0]?.ageMin ?? ''}-${filteredStandards[0]?.ageMax ?? ''} ‡∏õ‡∏µ`})
            </h2>
            <p className="text-sm text-muted">{TEST_TYPE_DETAILS[selectedTestType].description}</p>
          </div>
        </div>

        <div className="mt-4 grid grid-cols-1 gap-3 sm:grid-cols-2">
          {filteredStandards.length === 0 ? (
            <div className="col-span-full rounded-2xl border border-dashed p-6 text-center text-muted">
              ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
            </div>
          ) : (
            filteredStandards.map((row, index) => {
              const unit = TEST_TYPE_DETAILS[row.testType].unit;
              return (
                <div
                  key={`${row.testType}-${row.gender}-${index}`}
                  className={`rounded-2xl border px-4 py-3 text-sm ${getCategoryStyle(row.category)}`}
                >
                  <div className="flex items-start justify-between gap-3">
                    <div>
                      <p className="font-semibold">{row.category}</p>
                      <p className="text-xs opacity-80">{formatRange(row, unit)}</p>
                    </div>
                    <div className="flex gap-2 shrink-0">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleEdit(row)}
                        className="rounded-full"
                      >
                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                      </Button>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => handleDeleteClick(row)}
                        className="rounded-full text-rose-600 hover:bg-rose-50"
                      >
                        ‡∏•‡∏ö
                      </Button>
                    </div>
                  </div>
                </div>
              );
            })
          )}
        </div>
      </Card>

      {/* Add Standard Dialog */}
      <Dialog open={addOpen} onOpenChange={setAddOpen}>
        <DialogContent className="max-w-xl">
          <DialogHeader>
            <DialogTitle>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤</DialogTitle>
            <DialogDescription>
              ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            </DialogDescription>
          </DialogHeader>
          <form className="space-y-4" onSubmit={handleAddSubmit}>
            <div className="grid gap-4 sm:grid-cols-2">
              <div>
                <Label className="mb-1 block text-sm">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</Label>
                <Select
                  value={addForm.testType}
                  onChange={(e) => setAddForm((p) => ({ ...p, testType: e.target.value as TestType }))}
                >
                  {Object.keys(TEST_TYPE_DETAILS).map((key) => (
                    <option key={key} value={key}>
                      {TEST_TYPE_DETAILS[key as TestType].label}
                    </option>
                  ))}
                </Select>
              </div>
              <div>
                <Label className="mb-1 block text-sm">‡πÄ‡∏û‡∏®</Label>
                <Select
                  value={addForm.gender}
                  onChange={(e) => setAddForm((p) => ({ ...p, gender: e.target.value as "male" | "female" }))}
                >
                  <option value="male">‡∏ä‡∏≤‡∏¢</option>
                  <option value="female">‡∏´‡∏ç‡∏¥‡∏á</option>
                </Select>
              </div>
              <div>
                <Label className="mb-1 block text-sm">‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</Label>
                <Input value={addForm.ageMin} type="number" min={0} onChange={(e) => setAddForm((p) => ({ ...p, ageMin: e.target.value }))} />
              </div>
              <div>
                <Label className="mb-1 block text-sm">‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</Label>
                <Input value={addForm.ageMax} type="number" min={0} onChange={(e) => setAddForm((p) => ({ ...p, ageMax: e.target.value }))} />
              </div>
              <div className="sm:col-span-2">
                <Label className="mb-1 block text-sm">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</Label>
                <Input value={addForm.category} onChange={(e) => setAddForm((p) => ({ ...p, category: e.target.value }))} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°, ‡∏î‡∏µ, ‡∏û‡∏≠‡πÉ‡∏ä‡πâ, ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á" />
              </div>
              <div>
                <Label className="mb-1 block text-sm">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö</Label>
                <Select
                  value={addForm.comparison}
                  onChange={(e) => setAddForm((p) => ({ ...p, comparison: e.target.value as "range" | "threshold" }))}
                >
                  <option value="range">‡∏ä‡πà‡∏ß‡∏á (Min - Max)</option>
                  <option value="threshold">‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‚â• Min ‡∏´‡∏£‡∏∑‡∏≠ ‚â§ Max)</option>
                </Select>
              </div>
              <div>
                <Label className="mb-1 block text-sm">‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Min)</Label>
                <Input value={addForm.minValue} onChange={(e) => setAddForm((p) => ({ ...p, minValue: e.target.value }))} />
              </div>
              <div>
                <Label className="mb-1 block text-sm">‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Max)</Label>
                <Input value={addForm.maxValue} onChange={(e) => setAddForm((p) => ({ ...p, maxValue: e.target.value }))} />
              </div>
            </div>
            <DialogFooter className="pt-2">
              <Button type="button" variant="secondary" onClick={() => setAddOpen(false)}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </Button>
              <Button type="submit">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      <ControlledHelpDialog
        isOpen={helpDialogOpen}
        onClose={() => setHelpDialogOpen(false)}
        title="‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤"
        content={HelpContent}
      />

      {/* Edit Standard Dialog */}
      <Dialog open={editOpen} onOpenChange={setEditOpen}>
        <DialogContent className="max-w-xl">
          <DialogHeader>
            <DialogTitle>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤</DialogTitle>
            <DialogDescription>
              ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤
            </DialogDescription>
          </DialogHeader>
          {selectedRow && (
            <div className="space-y-4">
              <div className="rounded-lg bg-muted p-3">
                <p className="text-sm text-muted-foreground">
                  <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {TEST_TYPE_DETAILS[selectedRow.testType].label} ({genderLabel(selectedRow.gender)})
                </p>
                <p className="text-sm text-muted-foreground">
                  <strong>‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏:</strong> {selectedRow.ageMin}-{selectedRow.ageMax} ‡∏õ‡∏µ
                </p>
              </div>
              <div>
                <Label className="mb-1 block text-sm">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</Label>
                <Input 
                  value={formState.category} 
                  onChange={(e) => setFormState(p => ({ ...p, category: e.target.value }))}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°, ‡∏î‡∏µ, ‡∏û‡∏≠‡πÉ‡∏ä‡πâ"
                />
              </div>
              <div className="grid gap-4 sm:grid-cols-2">
                <div>
                  <Label className="mb-1 block text-sm">‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Min)</Label>
                  <Input 
                    type="number"
                    step="0.1"
                    value={formState.minValue} 
                    onChange={(e) => setFormState(p => ({ ...p, minValue: e.target.value }))}
                  />
                </div>
                <div>
                  <Label className="mb-1 block text-sm">‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Max)</Label>
                  <Input 
                    type="number"
                    step="0.1"
                    value={formState.maxValue} 
                    onChange={(e) => setFormState(p => ({ ...p, maxValue: e.target.value }))}
                  />
                </div>
              </div>
            </div>
          )}
          <DialogFooter className="pt-2">
            <Button type="button" variant="secondary" onClick={() => setEditOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button onClick={handleEditSubmit}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteOpen} onOpenChange={setDeleteOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö</DialogTitle>
            <DialogDescription>
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
            </DialogDescription>
          </DialogHeader>
          {selectedRow && (
            <div className="rounded-lg bg-rose-50 border border-rose-200 p-3">
              <p className="text-sm font-medium text-rose-900">{selectedRow.category}</p>
              <p className="text-xs text-rose-700">
                {TEST_TYPE_DETAILS[selectedRow.testType].label} - {genderLabel(selectedRow.gender)} ({selectedRow.ageMin}-{selectedRow.ageMax} ‡∏õ‡∏µ)
              </p>
            </div>
          )}
          <DialogFooter className="pt-2">
            <Button type="button" variant="secondary" onClick={() => setDeleteOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button variant="destructive" onClick={handleDeleteConfirm}>‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
