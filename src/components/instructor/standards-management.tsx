"use client";

import React, { useCallback, useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Plus, Edit, Trash2, Save, X, HelpCircle, Info } from "lucide-react";
import { useSession } from "@/providers/session-provider";
import { useGlobalLoading } from "@/providers/loading-provider";
import { useToast } from "@/providers/toast-provider";
import { api } from "@/lib/api";
import type {
  StandardPayload,
  StandardRow,
  TestType,
} from "@/lib/types";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface StandardsManagementProps {
  onBack: () => void;
  initialTestType?: TestType | "all";
  initialGender?: "male" | "female" | "all";
}

const TEST_TYPE_OPTIONS: Array<{ value: TestType; label: string }> = [
  { value: "bmi", label: "BMI" },
  { value: "sit_and_reach", label: "‡∏ô‡∏±‡πà‡∏á‡∏á‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤" },
  { value: "hand_grip", label: "‡πÅ‡∏£‡∏á‡∏ö‡∏µ‡∏ö‡∏°‡∏∑‡∏≠" },
  { value: "chair_stand", label: "‡∏•‡∏∏‡∏Å‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ" },
  { value: "step_up", label: "‡∏Å‡πâ‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÅ‡∏ó‡πà‡∏ô" },
];

const EMPTY_STANDARD: StandardPayload = {
  testType: "bmi",
  gender: "male",
  ageMin: 6,
  ageMax: 18,
  category: "‡∏î‡∏µ",
  minValue: null,
  maxValue: null,
  comparison: "range",
};

export function StandardsManagement({
  onBack,
  initialTestType,
  initialGender,
}: StandardsManagementProps) {
  const { session } = useSession();
  const { showLoading, hideLoading } = useGlobalLoading();
  const toast = useToast();
  const [standards, setStandards] = useState<StandardRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTestTab, setActiveTestTab] = useState<TestType | "all">(initialTestType ?? "all");
  const [genderFilter, setGenderFilter] = useState<"male" | "female" | "all">(
    initialGender ?? "all",
  );
  const [editingId, setEditingId] = useState<string | null>(null);
  const [formData, setFormData] = useState<StandardPayload>(EMPTY_STANDARD);
  const [creating, setCreating] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [standardToDelete, setStandardToDelete] = useState<StandardRow | null>(null);
  const [helpDialogOpen, setHelpDialogOpen] = useState(false);

  const loadStandards = useCallback(async () => {
    if (!session?.token) {
      setStandards([]);
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô");
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const data = await api.listStandards(session.token);
      setStandards(data);
    } catch (err) {
      const message = err instanceof Error ? err.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÑ‡∏î‡πâ";
      toast.error(message);
      setStandards([]);
    } finally {
      setLoading(false);
    }
  }, [session?.token, toast]);

  useEffect(() => {
    void loadStandards();
  }, [loadStandards]);

  useEffect(() => {
    if (initialTestType) {
      setActiveTestTab(initialTestType);
    }
  }, [initialTestType]);

  useEffect(() => {
    if (initialGender) {
      setGenderFilter(initialGender);
    }
  }, [initialGender]);

  const startCreate = () => {
    setCreating(true);
    setEditingId(null);
    setFormData(EMPTY_STANDARD);
    setIsDialogOpen(true);
  };

  const startEdit = (standard: StandardRow) => {
    setCreating(false);
    setEditingId(standard.id);
    setFormData({
      id: standard.id,
      testType: standard.testType,
      gender: standard.gender,
      ageMin: standard.ageMin,
      ageMax: standard.ageMax,
      category: standard.category,
      minValue: standard.minValue,
      maxValue: standard.maxValue,
      comparison: standard.comparison,
    });
    setIsDialogOpen(true);
  };

  const cancelForm = () => {
    setCreating(false);
    setEditingId(null);
    setFormData(EMPTY_STANDARD);
    setSubmitting(false);
    setIsDialogOpen(false);
  };

  const confirmDelete = (standard: StandardRow) => {
    setStandardToDelete(standard);
    setDeleteDialogOpen(true);
  };

  const handleDelete = async () => {
    if (!session?.token || !standardToDelete) return;

    try {
      showLoading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô...");
      await api.deleteStandard(session.token, standardToDelete.id);
      setDeleteDialogOpen(false);
      setStandardToDelete(null);
      toast.success("‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      await loadStandards();
    } catch (err) {
      const message = err instanceof Error ? err.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÑ‡∏î‡πâ";
      toast.error(message);
    } finally {
      hideLoading();
    }
  };

  const handleSubmit = async (event?: React.FormEvent<HTMLFormElement>) => {
    event?.preventDefault();
    if (!session?.token) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô");
      return;
    }

    if (!formData.category.trim()) {
      toast.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô");
      return;
    }

    try {
      setSubmitting(true);
      showLoading(creating ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô..." : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...");
      if (creating) {
        await api.createStandard(session.token, formData);
        toast.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else if (editingId) {
        await api.updateStandard(session.token, { ...formData, id: editingId });
        toast.success("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
      cancelForm();
      await loadStandards();
    } catch (err) {
      const message = err instanceof Error ? err.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÑ‡∏î‡πâ";
      toast.error(message);
      setSubmitting(false);
    } finally {
      hideLoading();
    }
  };

  if (loading) {
    return (
      <div className="flex min-h-[300px] items-center justify-center">
        <div className="text-subtle">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô...</div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</h1>
          <p className="text-sm text-muted">
            ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="secondary"
            onClick={() => {
              console.log('Help button clicked, current state:', helpDialogOpen);
              setHelpDialogOpen(true);
              console.log('After setState, should be true');
            }}
          >
            <HelpCircle className="mr-2 h-4 w-4" />
            ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠
          </Button>
          <Button onClick={startCreate}>
            <Plus className="mr-2 h-4 w-4" />
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå
          </Button>
          <Button variant="secondary" onClick={onBack}>
            <X className="mr-2 h-4 w-4" />
            ‡∏õ‡∏¥‡∏î
          </Button>
        </div>
      </div>

      {/* Help Dialog */}
      <Dialog
        open={helpDialogOpen}
        onOpenChange={(open) => {
          console.log('Dialog onOpenChange called with:', open);
          setHelpDialogOpen(open);
        }}
      >
        <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto z-[60]">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Info className="h-5 w-5 text-blue-500" />
              ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-6 text-sm">
            <div className="space-y-3">
              <h3 className="font-semibold text-base">üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏´‡∏ô?</h3>
              <div className="space-y-2 pl-4">
                <p><strong>‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û (BMI, Sit and Reach, ‡∏Ø‡∏•‡∏Ø)</p>
                <p><strong>‚Ä¢ ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏:</strong> ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô 18-25 ‡∏õ‡∏µ)</p>
                <p><strong>‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "‡∏î‡∏µ‡∏°‡∏≤‡∏Å", "‡∏î‡∏µ", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")</p>
                <p><strong>‚Ä¢ ‡∏Ñ‡πà‡∏≤ Min/Max:</strong> ‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö</p>
                <p><strong>‚Ä¢ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:</strong> ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)</p>
              </div>
            </div>

            <div className="space-y-3">
              <h3 className="font-semibold text-base">üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
              <div className="space-y-2 pl-4">
                <p><strong>1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå" ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô</p>
                <p><strong>2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Å‡∏ì‡∏ë‡πå:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡∏à‡∏∞‡πÄ‡∏î‡πâ‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤</p>
                <p><strong>3. ‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏•‡∏ö" ‚Üí ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô</p>
                <p><strong>4. ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡πÉ‡∏ä‡πâ Tabs ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á</p>
              </div>
            </div>

            <div className="space-y-3">
              <h3 className="font-semibold text-base">üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h3>
              <div className="bg-surface-elevated p-4 rounded-lg space-y-2">
                <p><strong>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</strong> BMI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢ ‡∏≠‡∏≤‡∏¢‡∏∏ 18-25 ‡∏õ‡∏µ</p>
                <ul className="list-disc pl-6 space-y-1">
                  <li>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "‡∏î‡∏µ‡∏°‡∏≤‡∏Å" ‚Üí Min: 18.5, Max: 22.9</li>
                  <li>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "‡∏î‡∏µ" ‚Üí Min: 23.0, Max: 24.9</li>
                  <li>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" ‚Üí Min: 25.0, Max: 29.9</li>
                  <li>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á" ‚Üí Min: 30.0, Max: null</li>
                </ul>
              </div>
            </div>

            <div className="space-y-3">
              <h3 className="font-semibold text-base">‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á</h3>
              <div className="space-y-2 pl-4 text-amber-700 dark:text-amber-400">
                <p>‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏®‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</p>
                <p>‚Ä¢ ‡∏Ñ‡πà‡∏≤ Min/Max ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</p>
                <p>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏à‡∏∞‡∏°‡∏µ‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ</p>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Edit/Create Dialog */}
      <Dialog
        open={isDialogOpen}
        onOpenChange={(open) => {
          if (!open) {
            cancelForm();
          } else {
            setIsDialogOpen(true);
          }
        }}
      >
        {/* ===== ‚¨áÔ∏è ‚¨áÔ∏è ‚¨áÔ∏è ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î) ‚¨áÔ∏è ‚¨áÔ∏è ‚¨áÔ∏è ===== */}
        
        {/* 1. ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ DialogContent ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏±‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 85% ‡∏Ç‡∏≠‡∏á‡∏à‡∏≠ */}
        <DialogContent className="max-w-2xl max-h-[85svh] overflow-y-auto">
          
          {/* ===== ‚¨ÜÔ∏è ‚¨ÜÔ∏è ‚¨ÜÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‚¨ÜÔ∏è ‚¨ÜÔ∏è ‚¨ÜÔ∏è ===== */}

          <DialogHeader>
            <DialogTitle>
              {creating ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" : "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"}
            </DialogTitle>
            <DialogDescription>
              ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà2222
            </DialogDescription>
          </DialogHeader>
          
          {/* 2. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ <form> ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡∏•‡∏ö flex-col, flex-1, overflow-hidden ‡∏≠‡∏≠‡∏Å) */}
          <form className="space-y-5" onSubmit={handleSubmit}>
            
            {/* 3. ‡∏•‡∏ö div ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö (flex-1 overflow-y-auto) ‡∏≠‡∏≠‡∏Å ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° */}
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <label className="mb-1 block text-sm font-medium">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</label>
                <Select
                  value={formData.testType}
                  onChange={(event) =>
                    setFormData((prev) => ({ ...prev, testType: event.target.value as TestType }))
                  }
                >
                  {TEST_TYPE_OPTIONS.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </Select>
              </div>
              <div>
                <label className="mb-1 block text-sm font-medium">‡πÄ‡∏û‡∏®222</label>
                <Select
                  value={formData.gender}
                  onChange={(event) =>
                    setFormData((prev) => ({ ...prev, gender: event.target.value as "male" | "female" }))
                  }
                >
                  <option value="male">‡∏ä‡∏≤‡∏¢</option>
                  <option value="female">‡∏´‡∏ç‡∏¥‡∏á</option>
                </Select>
              </div>
              <div>
                <label className="mb-1 block text-sm font-medium">‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</label>
                <Input
                  type="number"
                  value={formData.ageMin}
                  onChange={(event) =>
                    setFormData((prev) => ({ ...prev, ageMin: Number(event.target.value) }))
                  }
                />
              </div>
              <div>
                <label className="mb-1 block text-sm font-medium">‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</label>
                <Input
                  type="number"
                  value={formData.ageMax}
                  onChange={(event) =>
                    setFormData((prev) => ({ ...prev, ageMax: Number(event.target.value) }))
                  }
                />
              </div>
            </div>

            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <label className="mb-1 block text-sm font-medium">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</label>
                <Input
                  value={formData.category}
                  onChange={(event) => setFormData((prev) => ({ ...prev, category: event.target.value }))}
                />
              </div>
              <div>
                <label className="mb-1 block text-sm font-medium">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö</label>
                <Select
                  value={formData.comparison}
                  onChange={(event) =>
                    setFormData((prev) => ({
                      ...prev,
                      comparison: event.target.value as "range" | "threshold",
                    }))
                  }
                >
                  <option value="range">‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ Min - Max</option>
                  <option value="threshold">‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</option>
                </Select>
              </div>
              <div>
                <label className="mb-1 block text-sm font-medium">‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Min)</label>
                <Input
                  type="number"
                  value={formData.minValue ?? ""}
                  onChange={(event) =>
                    setFormData((prev) => ({
                      ...prev,
                      minValue: event.target.value === "" ? null : Number(event.target.value),
                    }))
                  }
                />
              </div>
              <div>
                <label className="mb-1 block text-sm font-medium">‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Max)</label>
                <Input
                  type="number"
                  value={formData.maxValue ?? ""}
                  onChange={(event) =>
                    setFormData((prev) => ({
                      ...prev,
                      maxValue: event.target.value === "" ? null : Number(event.target.value),
                    }))
                  }
                />
              </div>
            </div>

            {/* 4. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ div ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡∏•‡∏ö pt-4 ‡∏≠‡∏≠‡∏Å) */}
            <div className="flex flex-wrap justify-end gap-2">
              <Button type="button" variant="secondary" onClick={cancelForm}>
                <X className="mr-2 h-4 w-4" />
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </Button>
              <Button type="submit" loading={submitting}>
                <Save className="mr-2 h-4 w-4" />
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </Button>
            </div>
          </form>
          
        </DialogContent>
      </Dialog>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg">‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á</CardTitle>
        </CardHeader>
        <CardContent className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
          <div className="sm:col-span-2 lg:col-span-1">
            <label className="mb-1 block text-sm font-medium">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®</label>
            <Select
              value={genderFilter}
              onChange={(event) => setGenderFilter(event.target.value as typeof genderFilter)}
            >
              <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
              <option value="male">‡∏ä‡∏≤‡∏¢</option>
              <option value="female">‡∏´‡∏ç‡∏¥‡∏á</option>
            </Select>
          </div>
          <div className="sm:col-span-2 lg:col-span-2">
            <p className="text-xs text-muted">
              ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {`"‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"`} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            </p>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</CardTitle>
        </CardHeader>
        <CardContent className="overflow-x-auto">
          <Tabs
            value={activeTestTab}
            onValueChange={(value) => setActiveTestTab(value as typeof activeTestTab)}
            className="space-y-4"
          >
            <TabsList className="flex w-full flex-wrap justify-start gap-2 overflow-x-auto rounded-2xl border border-border/60 bg-surface p-2">
              <TabsTrigger value="all" className="rounded-full px-4 py-2 text-sm">
                ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </TabsTrigger>
              {TEST_TYPE_OPTIONS.map((option) => (
                <TabsTrigger
                  key={option.value}
                  value={option.value}
                  className="rounded-full px-4 py-2 text-sm"
                >
                  {option.label}
                </TabsTrigger>
              ))}
            </TabsList>

            {["all", ...TEST_TYPE_OPTIONS.map((option) => option.value)].map((value) => {
              const scopedList = standards
                .filter((standard) => {
                  const matchesTest = value === "all" || standard.testType === value;
                  const matchesGender = genderFilter === "all" || standard.gender === genderFilter;
                  return matchesTest && matchesGender;
                })
                .sort((a, b) => {
                  if (a.gender !== b.gender) {
                    return a.gender === "male" ? -1 : 1;
                  }
                  if (a.ageMin !== b.ageMin) {
                    return a.ageMin - b.ageMin;
                  }
                  return a.category.localeCompare(b.category, "th");
                });

              const sections = (["male", "female"] as const)
                .map((gender) => ({
                  gender,
                  rows: scopedList.filter((standard) => standard.gender === gender),
                }))
                .filter((section) => section.rows.length > 0);

              return (
                <TabsContent key={value} value={value as typeof activeTestTab}>
                  {scopedList.length === 0 ? (
                    <div className="py-10 text-center text-muted">
                      ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                    </div>
                  ) : (
                    <div className="space-y-6">
                      {sections.map((section) => (
                        <div key={`${value}-${section.gender}`} className="space-y-3">
                          <div className="flex items-center justify-between">
                            <h3 className="text-sm font-semibold text-primary">
                              {section.gender === "male" ? "‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢" : "‡πÄ‡∏û‡∏®‡∏´‡∏ç‡∏¥‡∏á"}
                            </h3>
                            <span className="text-xs text-muted">
                              {section.rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                            </span>
                          </div>
                          <div className="overflow-x-auto rounded-xl border border-border-strong/80 bg-surface-elevated">
                            <table className="min-w-full divide-y divide-border text-sm">
                              <thead className="bg-surface">
                                <tr>
                                  <th className="px-4 py-3 text-left">‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</th>
                                  <th className="px-4 py-3 text-left">‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏</th>
                                  <th className="px-4 py-3 text-left">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                                  <th className="px-4 py-3 text-left">‡∏Ñ‡πà‡∏≤ Min</th>
                                  <th className="px-4 py-3 text-left">‡∏Ñ‡πà‡∏≤ Max</th>
                                  <th className="px-4 py-3 text-left">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö</th>
                                  <th className="px-4 py-3 text-right">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                </tr>
                              </thead>
                              <tbody className="divide-y divide-border/60">
                                {section.rows.map((standard) => (
                                  <tr key={standard.id} className="align-top">
                                    <td className="px-4 py-3">
                                      {TEST_TYPE_OPTIONS.find((option) => option.value === standard.testType)?.label ?? standard.testType}
                                    </td>
                                    <td className="px-4 py-3 whitespace-nowrap">
                                      {standard.ageMin} - {standard.ageMax} ‡∏õ‡∏µ
                                    </td>
                                    <td className="px-4 py-3">
                                      <Badge variant="secondary">{standard.category}</Badge>
                                    </td>
                                    <td className="px-4 py-3">{standard.minValue ?? "-"}</td>
                                    <td className="px-4 py-3">{standard.maxValue ?? "-"}</td>
                                    <td className="px-4 py-3">
                                      {standard.comparison === "range" ? "‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤" : "‡∏Ñ‡πà‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"}
                                    </td>
                                    <td className="px-4 py-3 text-right">
                                      <div className="flex justify-end gap-2">
                                        <Button variant="secondary" size="sm" onClick={() => startEdit(standard)}>
                                          <Edit className="h-4 w-4" />
                                        </Button>
                                        <Button variant="destructive" size="sm" onClick={() => confirmDelete(standard)}>
                                          <Trash2 className="h-4 w-4" />
                                        </Button>
                                      </div>
                                    </td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </TabsContent>
              );
            })}
          </Tabs>
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</DialogTitle>
            <DialogDescription>
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ô‡∏µ‡πâ?
            </DialogDescription>
          </DialogHeader>
          {standardToDelete && (
            <div className="space-y-2 rounded-lg bg-surface-elevated p-4">
              <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> {TEST_TYPE_OPTIONS.find(o => o.value === standardToDelete.testType)?.label}</p>
              <p><strong>‡πÄ‡∏û‡∏®:</strong> {standardToDelete.gender === "male" ? "‡∏ä‡∏≤‡∏¢" : "‡∏´‡∏ç‡∏¥‡∏á"}</p>
              <p><strong>‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏:</strong> {standardToDelete.ageMin}-{standardToDelete.ageMax} ‡∏õ‡∏µ</p>
              <p><strong>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> <Badge variant="secondary">{standardToDelete.category}</Badge></p>
            </div>
          )}
          <div className="flex justify-end gap-2">
            <Button variant="secondary" onClick={() => setDeleteDialogOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button variant="destructive" onClick={handleDelete}>
              <Trash2 className="mr-2 h-4 w-4" />
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}