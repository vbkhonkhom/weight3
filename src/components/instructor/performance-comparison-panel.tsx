import { type ChangeEvent, useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select } from "@/components/ui/select";
import type { ClassStudent } from "@/lib/types";
import {
  DEFAULT_EXPORT_COLUMNS,
  type ExportColumn,
  buildComparisonRows,
  buildExportRows,
  exportToCsv,
  // exportToPrintablePdf,
  type ClassSnapshot,
  type ComparisonFilters,
} from "@/lib/instructor-analytics";
import { cn } from "@/lib/utils";
import { HelpDialog, HelpSection, HelpList, HelpTip } from "@/components/ui/help-dialog";

interface PerformanceComparisonPanelProps {
  snapshots: ClassSnapshot[];
  studentLookup: Record<string, ClassStudent[]>;
}

const genderOptions: Array<{ value: ComparisonFilters["gender"]; label: string }> = [
  { value: "all", label: "‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏®" },
  { value: "male", label: "‡∏ä‡∏≤‡∏¢" },
  { value: "female", label: "‡∏´‡∏ç‡∏¥‡∏á" },
];

export function PerformanceComparisonPanel({
  snapshots,
  studentLookup,
}: PerformanceComparisonPanelProps) {
  const [filters, setFilters] = useState<ComparisonFilters>({
    classIds: [],
    gender: "all",
  });
  const [ageRange, setAgeRange] = useState<{ min?: number; max?: number }>({});
  const [selectedColumns, setSelectedColumns] = useState<ExportColumn[]>(DEFAULT_EXPORT_COLUMNS);

  const comparisonRows = useMemo(
    () =>
      buildComparisonRows(
        snapshots,
        {
          ...filters,
          ageMin: ageRange.min,
          ageMax: ageRange.max,
        },
        studentLookup,
      ),
    [snapshots, filters, studentLookup, ageRange],
  );

  const exportRows = useMemo(
    () => buildExportRows(snapshots, studentLookup),
    [snapshots, studentLookup],
  );

  const classOptions = useMemo(
    () =>
      snapshots.map((snapshot) => ({
        value: snapshot.classId,
        label: `${snapshot.className} (${snapshot.studentCount})`,
      })),
    [snapshots],
  );

  const handleToggleClass = (classId: string) => {
    setFilters((prev) => {
      if (prev.classIds.includes(classId)) {
        return { ...prev, classIds: prev.classIds.filter((id) => id !== classId) };
      }
      return { ...prev, classIds: [...prev.classIds, classId] };
    });
  };

  const handleToggleColumn = (column: ExportColumn) => {
    setSelectedColumns((prev) => {
      const exists = prev.find((item) => item.key === column.key);
      if (exists) {
        return prev.filter((item) => item.key !== column.key);
      }
      return [...prev, column];
    });
  };

  const progressMax = useMemo(() => {
    const values = comparisonRows
      .map((row) => row.averageOverallScore ?? 0)
      .filter((value) => Number.isFinite(value));
    return values.length > 0 ? Math.max(...values) : 0;
  }, [comparisonRows]);

  // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô: ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  const helpContent = (
    <>
      <HelpSection title="‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°">
        <p className="text-sm text-muted">
          ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏®‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV ‡πÑ‡∏î‡πâ
        </p>
      </HelpSection>

      <HelpSection title="‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠">
        <HelpList
          items={[
            "üìä ‡πÅ‡∏ñ‡∏ö‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô",
            "üìè ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏ó‡∏≤: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ Benchmark (‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô)",
            "üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì",
            "üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô",
          ]}
        />
      </HelpSection>

      <HelpSection title="‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô">
        <HelpList
          items={[
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô",
            "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏®‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            "‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÅ‡∏ñ‡∏ö‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô Benchmark ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡πÑ‡∏´‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå",
            "‡∏Å‡∏î‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
          ]}
        />
      </HelpSection>

      <HelpSection title="‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô">
        <p className="text-sm text-muted mb-2">
          ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å:
        </p>
        <HelpList
          items={[
            "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)",
            "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ (BMI, ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÑ‡∏Ç‡∏°‡∏±‡∏ô)",
            "‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏î‡∏µ‡∏°‡∏≤‡∏Å=5, ‡∏î‡∏µ=4, ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á=3, ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á=2)",
            "‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô",
          ]}
        />
      </HelpSection>

      <HelpSection title="Benchmark ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?">
        <p className="text-sm text-muted mb-2">
          Benchmark ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÉ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
        </p>
        <p className="text-sm text-muted mb-2">
          ‡∏Ñ‡πà‡∏≤ Benchmark ‡∏°‡∏≤‡∏à‡∏≤‡∏Å:
        </p>
        <HelpList
          items={[
            "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏®",
            "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö '‡∏î‡∏µ' (4 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥",
            "‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ñ‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô Benchmark = ‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå",
            "‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ = ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
          ]}
        />
        <HelpTip>‡∏ñ‡πâ‡∏≤‡πÅ‡∏ñ‡∏ö‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏™‡πâ‡∏ô Benchmark ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</HelpTip>
      </HelpSection>

      <HelpSection title="‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•">
        <p className="text-sm text-muted mb-2">
          ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
        </p>
        <HelpList
          items={[
            "‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
            "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
            "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏î‡∏µ‡∏°‡∏≤‡∏Å/‡∏î‡∏µ/‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á/‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)",
            "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ",
          ]}
        />
      </HelpSection>
    </>
  );

  return (
    <Card>
      <CardHeader className="space-y-2 px-4 sm:px-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
          <div>
            <CardTitle className="text-base sm:text-lg font-semibold text-primary">
              ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            </CardTitle>
            <p className="text-xs sm:text-sm text-muted">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
            </p>
          </div>
          <div className="flex flex-wrap gap-2">
            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô */}
            <HelpDialog title="‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" content={helpContent} />
            <Button
              variant="secondary"
              size="sm"
              onClick={() => exportToCsv(exportRows, selectedColumns)}
              disabled={exportRows.length === 0 || selectedColumns.length === 0}
              className="min-h-[44px] flex-1 sm:flex-none"
            >
              ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV
            </Button>
            {/* PDF export disabled */}
          </div>
        </div>
      </CardHeader>

      <CardContent className="space-y-6 px-4 sm:px-6">
        <div className="grid gap-3 sm:gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
          <div>
            <p className="mb-2 text-xs font-medium text-muted uppercase tracking-wide">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            </p>
            <div className="max-h-40 space-y-2 overflow-y-auto rounded-lg border border-border/60 p-3">
              {classOptions.map((option) => {
                const isSelected = filters.classIds.includes(option.value);
                return (
                  <button
                    key={option.value}
                    type="button"
                    onClick={() => handleToggleClass(option.value)}
                    className={cn(
                      "flex w-full items-center justify-between rounded-lg px-3 py-2 text-left text-xs sm:text-sm transition-colors min-h-[44px]",
                      isSelected ? "bg-accent/10 text-primary" : "hover:bg-surface",
                    )}
                  >
                    <span>{option.label}</span>
                    {isSelected ? (
                      <span className="rounded-full bg-emerald-100 px-2 py-0.5 text-[11px] font-medium text-emerald-700">
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                      </span>
                    ) : null}
                  </button>
                );
              })}
              {classOptions.length === 0 && (
                <p className="text-xs sm:text-sm text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
              )}
            </div>
          </div>

          <div>
            <p className="mb-2 text-xs font-medium text-muted uppercase tracking-wide">
              ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏®
            </p>
            <Select
              value={filters.gender}
              onChange={(event: ChangeEvent<HTMLSelectElement>) =>
                setFilters((prev) => ({
                  ...prev,
                  gender: event.target.value as ComparisonFilters["gender"],
                }))
              }
              className="min-h-[44px]"
            >
              {genderOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </Select>
          </div>

          <div>
            <p className="mb-2 text-xs font-medium text-muted uppercase tracking-wide">
              ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
            </p>
            <Input
              type="number"
              value={ageRange.min ?? ""}
              onChange={(event) =>
                setAgeRange((prev) => ({
                  ...prev,
                  min: event.target.value === "" ? undefined : Number(event.target.value),
                }))
              }
              min={5}
              max={80}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô 12"
              className="min-h-[44px]"
            />
          </div>

          <div>
            <p className="mb-2 text-xs font-medium text-muted uppercase tracking-wide">
              ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            </p>
            <Input
              type="number"
              value={ageRange.max ?? ""}
              onChange={(event) =>
                setAgeRange((prev) => ({
                  ...prev,
                  max: event.target.value === "" ? undefined : Number(event.target.value),
                }))
              }
              min={5}
              max={80}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô 18"
              className="min-h-[44px]"
            />
          </div>
        </div>

        <div className="rounded-xl border border-border/60 overflow-x-auto">
          <div className="flex items-center justify-end gap-2 sm:gap-4 px-3 sm:px-4 py-2 text-[10px] sm:text-[11px] text-muted min-w-[300px]">
            <div className="flex items-center gap-2">
              <span className="inline-block h-2 w-4 rounded-full bg-gradient-to-r from-accent to-accent-light" />
              <span>‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>
            </div>
            <div className="flex items-center gap-2">
              <span className="inline-block h-2 w-4 rounded-full border border-dashed border-accent-dark/50" />
              <span>Benchmark</span>
            </div>
          </div>
          <div className="grid grid-cols-1 gap-0 divide-y divide-border">
            {comparisonRows.length === 0 ? (
              <div className="p-6 text-center text-sm text-muted">
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
              </div>
            ) : (
              comparisonRows.map((row) => {
                const score = row.averageOverallScore ?? 0;
                const benchmark = row.benchmarkOverallScore ?? 0;
                const max = progressMax || 100;
                const percentage = max === 0 ? 0 : Math.max(0, Math.min(100, (score / max) * 100));
                const benchmarkPercentage =
                  max === 0 ? 0 : Math.max(0, Math.min(100, (benchmark / max) * 100));

                return (
                  <div key={row.classId} className="flex flex-col gap-3 p-4 sm:flex-row sm:items-center sm:justify-between">
                    <div>
                      <p className="text-sm font-semibold text-primary">{row.className}</p>
                      <p className="text-xs text-muted">
                        ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô {row.averageOverallScore?.toFixed(1) ?? "-"} ¬∑ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå {row.activeStudents.toLocaleString("th-TH")}
                      </p>
                    </div>
                    <div className="w-full max-w-md">
                      <div className="relative h-6 rounded-full bg-surface">
                        <div
                          className="absolute left-0 top-0 h-full rounded-full bg-gradient-to-r from-accent to-accent-light"
                          style={{ width: `${percentage}%` }}
                        />
                        <div
                          className="absolute left-0 top-0 h-full rounded-full border border-dashed border-accent-dark/50"
                          style={{ width: `${benchmarkPercentage}%` }}
                        />
                      </div>
                      {/* ‡∏•‡∏ö‡∏õ‡πâ‡∏≤‡∏¢ "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢" ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Benchmark ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ */}
                      <div className="mt-1 flex justify-end text-[11px] text-muted">
                        <span>Benchmark {row.benchmarkOverallScore?.toFixed(1) ?? "-"}</span>
                      </div>
                    </div>
                  </div>
                );
              })
            )}
          </div>
        </div>

        <div>
          <p className="mb-2 text-xs font-medium text-muted uppercase tracking-wide">
            ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
          </p>
          <div className="flex flex-wrap gap-2">
            {DEFAULT_EXPORT_COLUMNS.map((column) => {
              const active = selectedColumns.some((item) => item.key === column.key);
              return (
                <button
                  key={column.key}
                  type="button"
                  className={cn(
                    "rounded-full border px-3 py-1 text-xs transition-colors",
                    active
                      ? "border-accent bg-accent/10 text-accent"
                      : "border-border text-muted hover:border-accent/60",
                  )}
                  onClick={() => handleToggleColumn(column)}
                >
                  {column.label}
                </button>
              );
            })}
          </div>
          {selectedColumns.length === 0 && (
            <p className="mt-2 text-xs text-error">
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
