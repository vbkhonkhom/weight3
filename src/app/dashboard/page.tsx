"use client";

import { useCallback, useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import useSWR from "swr";
import { AppShell } from "@/components/layout/app-shell";
import { InstructorDashboard } from "@/components/instructor/instructor-dashboard";
import { useSession } from "@/providers/session-provider";
import { useGlobalLoading } from "@/providers/loading-provider";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { EmptyState } from "@/components/ui/empty-state";
import { EmptyStateEnhanced } from "@/components/ui/empty-state-enhanced";
import { LoadingState } from "@/components/ui/loading-spinner";
import { OnboardingTour, useOnboarding } from "@/components/ui/onboarding-tour";
import { useToast } from "@/providers/toast-provider";
import { ResultTable } from "@/components/dashboard/result-table";
import { EvaluationBadge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { HelpDialog } from "@/components/ui/help-dialog";
import { StudentHelpContent } from "@/lib/help-content-student";
import { api } from "@/lib/api";
import { cn, formatNumber, formatTestName, downloadRawCsv } from "@/lib/utils";
import type { SessionPayload, StudentDashboardPayload, TestResult, TestType } from "@/lib/types";
import { differenceInDays, differenceInYears, format } from "date-fns";
import { enhanceTestResultWithManualStandard } from "@/lib/manual-standards";
import { th } from "date-fns/locale";
import { Alert } from "@/components/ui/alert";
import { useApiSWR } from "@/lib/use-api-swr";

export default function DashboardPage() {
  const router = useRouter();
  const { session, isRestoring } = useSession();

  useEffect(() => {
    if (!isRestoring && !session?.user) {
      router.replace("/");
    }
  }, [isRestoring, session, router]);

  if (isRestoring) {
    return (
      <AppShell title="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...">
        <div className="flex items-center justify-center min-h-[50vh]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
          </div>
        </div>
      </AppShell>
    );
  }

  if (!session?.user) {
    return null;
  }

  const dashboardTitle =
    session.user.role === "instructor"
      ? "Dashboard ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå"
      : session.user.role === "athlete"
        ? "Dashboard ‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤"
        : "Dashboard ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô";

  return (
    <AppShell title={dashboardTitle}>
      {session.user.role === "instructor" ? (
        <InstructorDashboard />
      ) : (
        <StudentDashboard session={session} />
      )}
    </AppShell>
  );
}

/* ---------------------- Student Dashboard (client) ---------------------- */

const STUDENT_TEST_ORDER: TestType[] = ["bmi", "sit_and_reach", "hand_grip", "chair_stand", "step_up"];
const STUDENT_TEST_ROUTES: Record<TestType, string> = {
  bmi: "/tests/bmi",
  sit_and_reach: "/tests/flexibility",
  hand_grip: "/tests/strength",
  chair_stand: "/tests/chair-stand",
  step_up: "/tests/endurance",
};

interface TestCardConfig {
  test: TestType;
  title: string;
  subtitle: string;
  icon: string;
  iconGradient: string;
  hoverBorder: string;
  unit?: string;
  decimals?: number;
  rawUnit?: string;
  rawDecimals?: number;
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏ô‡πÄ‡∏ó‡∏Ñ
const TEST_CARD_CONFIG: TestCardConfig[] = [
  {
    test: "bmi",
    title: "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢",
    subtitle: "BMI",
    icon: "‚öñÔ∏è",
    iconGradient: "from-blue-500/20 to-blue-600/20",
    hoverBorder: "hover:border-blue-500/20",
    unit: "",
    decimals: 1,
  },
  {
    test: "sit_and_reach",
    title: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô",
    subtitle: "‡∏ô‡∏±‡πà‡∏á‡∏á‡∏≠‡∏ï‡∏±‡∏ß",
    icon: "ü§∏",
    iconGradient: "from-green-500/20 to-green-600/20",
    hoverBorder: "hover:border-green-500/20",
    unit: "‡∏ã‡∏°.",
    decimals: 0,
  },
  {
    test: "hand_grip",
    title: "‡πÅ‡∏£‡∏á‡∏ö‡∏µ‡∏ö‡∏°‡∏∑‡∏≠",
    subtitle: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠",
    icon: "üí™",
    iconGradient: "from-red-500/20 to-red-600/20",
    hoverBorder: "hover:border-red-500/20",
    unit: "",
    decimals: 1,
    rawUnit: "‡∏Å‡∏Å.",
    rawDecimals: 0,
  },
  {
    test: "chair_stand",
    title: "‡∏•‡∏∏‡∏Å‡∏¢‡∏∑‡∏ô‡∏ô‡∏±‡πà‡∏á",
    subtitle: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô",
    icon: "ü™ë",
    iconGradient: "from-purple-500/20 to-purple-600/20",
    hoverBorder: "hover:border-purple-500/20",
    unit: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    decimals: 0,
  },
  {
    test: "step_up",
    title: "‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡∏ö‡∏±‡∏ô‡πÑ‡∏î",
    subtitle: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô",
    icon: "üèÉ",
    iconGradient: "from-orange-500/20 to-orange-600/20",
    hoverBorder: "hover:border-orange-500/20",
    unit: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    decimals: 0,
  },
];

function toValidDate(value?: string | null) {
  if (!value) return null;
  const date = new Date(value);
  return Number.isNaN(date.getTime()) ? null : date;
}

function getValidTime(value?: string | null) {
  const date = toValidDate(value);
  return date ? date.getTime() : 0;
}

function safeFormatDate(value?: string | null, fmt = "d MMM yyyy", fallback = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") {
  const date = toValidDate(value);
  if (!date) return fallback;
  try {
    return format(date, fmt, { locale: th });
  } catch {
    return fallback;
  }
}

function StudentDashboard({
  session,
}: {
  session: SessionPayload | null;
}) {
  const router = useRouter();
  const { showLoading, hideLoading } = useGlobalLoading();
  const { hasSeenTour, markAsComplete } = useOnboarding("student_dashboard");

  const { data, error, isLoading, mutate } = useApiSWR<StudentDashboardPayload>(
    "student-dashboard",
    (token) => api.getStudentDashboard(token)
  );

  const computedAge = useMemo(() => {
    const birthdate = session?.user?.birthdate;
    if (!birthdate) return undefined;
    const parsed = new Date(birthdate);
    if (Number.isNaN(parsed.getTime())) return undefined;
    return differenceInYears(new Date(), parsed);
  }, [session?.user?.birthdate]);

  const processedData = useMemo(() => {
    if (!data) return null;
    if (!session?.user?.gender || typeof computedAge !== "number") {
      return data;
    }

    const enhance = (result: TestResult) =>
      enhanceTestResultWithManualStandard(result, {
        gender: session.user.gender,
        age: computedAge,
        role: session.user.role,
      });

    const enhancedResults = data.results.map(enhance);
    const enhancedHistoryByTest = Object.fromEntries(
      (Object.entries(data.historyByTest) as Array<[TestType, TestResult[]]>).map(
        ([test, history]) => [test, history.map(enhance)],
      ),
    ) as StudentDashboardPayload["historyByTest"];

    return {
      ...data,
      results: enhancedResults,
      historyByTest: enhancedHistoryByTest,
    };
  }, [data, session?.user?.gender, computedAge, session?.user?.role]);

  const dashboardData = processedData ?? data;

  const latestByTest = useMemo(() => {
    const result: Partial<Record<TestType, TestResult>> = {};
    if (!dashboardData?.historyByTest) return result;
    (Object.keys(dashboardData.historyByTest) as TestType[]).forEach((test) => {
      const history = dashboardData.historyByTest[test];
      if (history?.length) {
        const sorted = [...history].sort(
          (a, b) => getValidTime(b.recordedAt) - getValidTime(a.recordedAt)
        );
        result[test] = sorted[0];
      }
    });
    return result;
  }, [dashboardData?.historyByTest]);

  const recentResults = useMemo(() => {
    if (!dashboardData?.results?.length) return [] as TestResult[];
    return [...dashboardData.results]
      .sort((a, b) => getValidTime(b.recordedAt) - getValidTime(a.recordedAt))
      .slice(0, 6);
  }, [dashboardData?.results]);

  const hasTestData = (dashboardData?.results?.length ?? 0) > 0;

  const testsNeedingUpdate = useMemo(() => {
    return STUDENT_TEST_ORDER.filter((test) => {
      const latest = latestByTest[test];
      if (!latest) return true;
      const recordedDate = toValidDate(latest.recordedAt);
      if (!recordedDate) return true;
      return differenceInDays(new Date(), recordedDate) >= 30;
    });
  }, [latestByTest]);

  // ‡∏•‡∏ö progressInsights ‡πÅ‡∏•‡∏∞ focusAreas ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô - ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ

  const handleNavigateToTest = useCallback(
    (testType: TestType) => {
      router.push(STUDENT_TEST_ROUTES[testType] ?? "/dashboard/tests");
    },
    [router],
  );

  const handleNavigateToComparison = useCallback(() => {
    router.push("/comparison");
  }, [router]);

  const handleNavigateToStandards = useCallback(() => {
    router.push("/standards");
  }, [router]);

  const handleExportCsv = useCallback(async () => {
    if (!session?.user) return;
    try {
      showLoading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå CSV...");
      const measurements = session?.token ? await api.getBodyMeasurements(session.token) : undefined;

      const name = session.user.fullName || session.user.email || "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô";
      const now = new Date();
      const classTitle = session.user.className || "‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•";
      const filename = `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô_${name.replace(/\s+/g, "-")}_${now.toISOString().slice(0,10)}.csv`;

      const lines: string[][] = [];
      
      // === ‡∏´‡∏±‡∏ß‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° ===
      lines.push([`=== ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${classTitle} ===`]);
      lines.push([]);

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
      const fmt = (n?: number) => (typeof n === "number" && Number.isFinite(n) ? n.toFixed(1) : "-");
      const getMetricValue = (test: TestType) => {
        const latest = latestByTest[test];
        return latest ? (latest.derivedValue ?? latest.value) : undefined;
      };
      
      lines.push(["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "‡∏Ñ‡πà‡∏≤"]);
      lines.push(["Muscular Strength", fmt(getMetricValue("hand_grip"))]);
      lines.push(["Muscular Endurance", fmt(getMetricValue("chair_stand"))]);
      lines.push(["Flexibility", fmt(getMetricValue("sit_and_reach"))]);
      lines.push(["%Fat", fmt(getMetricValue("bmi"))]);  // %Fat = BMI
      lines.push(["Cardio - Respiatory Endurance", fmt(getMetricValue("step_up"))]);
      lines.push(["‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", computedAge != null ? Math.round(computedAge).toString() : "-"]);
      lines.push(["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1"]);
      lines.push(["‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô", name]);
      lines.push(["‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", name]);
      lines.push([]);

      // ‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
      lines.push([
        "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        "",
        "",
        "",
        "‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢",
        ...Array(9).fill(""),
        "‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢",
        ...Array(19).fill(""),
        "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
      ]);

      // ‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á
      const header = [
        "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•",
        "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
        "‡∏≠‡∏≤‡∏¢‡∏∏",
        "‡πÄ‡∏û‡∏®",
        "Muscular Strength",
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        "Muscular Endurance",
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        "Flexibility",
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        "%Fat",
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        "Cardio - Respiatory Endurance",
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
        "‡∏ä‡∏µ‡∏û‡∏à‡∏£",
        "‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠",
        "‡∏´‡∏±‡∏ß‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏ß‡∏≤",
        "‡∏´‡∏±‡∏ß‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢",
        "‡πÅ‡∏Ç‡∏ô‡∏ó‡πà‡∏≠‡∏ô‡∏ö‡∏ô(‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤)",
        "‡πÅ‡∏Ç‡∏ô‡∏ó‡πà‡∏≠‡∏ô‡∏ö‡∏ô(‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)",
        "‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠(‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤)",
        "‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠(‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)",
        "‡∏£‡∏≠‡∏ö‡∏≠‡∏Å",
        "‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡πâ‡∏≠‡∏á",
        "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß",
        "‡∏£‡∏≠‡∏ö‡∏™‡∏∞‡πÇ‡∏û‡∏Å",
        "‡∏ï‡πâ‡∏ô‡∏Ç‡∏≤(‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤)",
        "‡∏ï‡πâ‡∏ô‡∏Ç‡∏≤(‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)",
        "‡∏ô‡πà‡∏≠‡∏á(‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤)",
        "‡∏ô‡πà‡∏≠‡∏á(‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)",
        "‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤(‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤)",
        "‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤(‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)",
        "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
      ];
      lines.push(header);

      // ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
      const genderTh = session.user.gender === "male" ? "‡∏ä‡∏≤‡∏¢" : "‡∏´‡∏ç‡∏¥‡∏á";
      const age = computedAge != null ? String(Math.round(computedAge)) : "";
      
      // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢)
      const latestDate = (() => {
        const all = Object.values(latestByTest) as TestResult[];
        const dt = all
          .map((r) => new Date(r.recordedAt))
          .filter((d) => !Number.isNaN(d.getTime()))
          .sort((a, b) => b.getTime() - a.getTime())[0];
        if (!dt) return "-";
        try {
          return dt.toLocaleDateString("th-TH", { day: "2-digit", month: "2-digit", year: "numeric" });
        } catch {
          return dt.toISOString().split("T")[0];
        }
      })();

      // ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á ‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏ß‡πà‡∏≤)
      const latestMeasurement = (() => {
        if (!measurements) return null;
        const before = measurements.before?.recordedAt ? new Date(measurements.before.recordedAt) : null;
        const after = measurements.after?.recordedAt ? new Date(measurements.after.recordedAt) : null;
        if (before && after) {
          return after.getTime() >= before.getTime() ? measurements.after : measurements.before;
        } else if (after) {
          return measurements.after;
        } else if (before) {
          return measurements.before;
        }
        return null;
      })();
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°
      const overallLevel = (() => {
        const all = Object.values(latestByTest) as TestResult[];
        const scoreEval = (e: string) => {
          if (!e) return 0;
          if (/(‡∏î‡∏µ‡∏°‡∏≤‡∏Å|excellent)/i.test(e)) return 4;
          if (/(‡∏î‡∏µ|good)/i.test(e)) return 3;
          if (/(‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á|average)/i.test(e)) return 2;
          if (/(‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤|needs)/i.test(e)) return 1;
          return 0;
        };
        const totalScore = all.reduce((s, r) => s + scoreEval(r?.evaluation ?? ""), 0);
        if (totalScore >= 12) return "‡∏î‡∏µ‡∏°‡∏≤‡∏Å";
        if (totalScore >= 9) return "‡∏î‡∏µ";
        if (totalScore >= 6) return "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á";
        return "‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤";
      })();

      const row = [
        name,
        session.user.email || "",
        age,
        genderTh,
        fmt(getMetricValue("hand_grip")),
        latestByTest.hand_grip?.evaluation || "",
        fmt(getMetricValue("chair_stand")),
        latestByTest.chair_stand?.evaluation || "",
        fmt(getMetricValue("sit_and_reach")),
        latestByTest.sit_and_reach?.evaluation || "",
        fmt(getMetricValue("bmi")),
        "",  // %Fat ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        fmt(getMetricValue("step_up")),
        latestByTest.step_up?.evaluation || "",
        // ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢
        (latestMeasurement?.weight ?? "").toString(),
        (latestMeasurement?.height ?? "").toString(),
        (latestMeasurement?.pulse ?? "").toString(),
        (latestMeasurement?.neck ?? "").toString(),
        (latestMeasurement?.shoulderRight ?? "").toString(),
        (latestMeasurement?.shoulderLeft ?? "").toString(),
        (latestMeasurement?.upperArmRight ?? "").toString(),
        (latestMeasurement?.upperArmLeft ?? "").toString(),
        (latestMeasurement?.wristRight ?? "").toString(),
        (latestMeasurement?.wristLeft ?? "").toString(),
        (latestMeasurement?.chest ?? "").toString(),
        (latestMeasurement?.abdomen ?? "").toString(),
        (latestMeasurement?.waist ?? "").toString(),
        (latestMeasurement?.hip ?? "").toString(),
        (latestMeasurement?.thighRight ?? "").toString(),
        (latestMeasurement?.thighLeft ?? "").toString(),
        (latestMeasurement?.calfRight ?? "").toString(),
        (latestMeasurement?.calfLeft ?? "").toString(),
        (latestMeasurement?.ankleRight ?? "").toString(),
        (latestMeasurement?.ankleLeft ?? "").toString(),
        overallLevel,
        latestDate,
      ];
      lines.push(row);

      downloadRawCsv(lines, filename);
    } catch (e) {
      console.error(e);
    } finally {
      hideLoading();
    }
  }, [session?.user, session?.token, computedAge, latestByTest, showLoading, hideLoading]);

  // ‡∏ó‡∏≥ nextActions ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ - ‡πÅ‡∏Ñ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  const nextActions = useMemo(() => {
    const actions: Array<{
      title: string;
      description: string;
      cta: string;
      onClick: () => void;
    }> = [];

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 tests ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    testsNeedingUpdate.slice(0, 2).forEach((test) => {
      const latest = latestByTest[test];
      if (!latest) {
        actions.push({
          title: `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${formatTestName(test)}`,
          description: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å",
          cta: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
          onClick: () => handleNavigateToTest(test),
        });
      } else {
        const days = differenceInDays(new Date(), new Date(latest.recordedAt));
        actions.push({
          title: `${formatTestName(test)} ‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ${days} ‡∏ß‡∏±‡∏ô`,
          description: "‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà",
          cta: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•",
          onClick: () => handleNavigateToTest(test),
        });
      }
    });

    return actions.slice(0, 2);
  }, [
    testsNeedingUpdate,
    latestByTest,
    handleNavigateToTest,
  ]);

  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [changingPassword, setChangingPassword] = useState(false);
  const [passwordStatus, setPasswordStatus] = useState<{
    type: "success" | "error";
    message: string;
  } | null>(null);

  const handlePasswordChange = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setPasswordStatus(null);

    if (!session?.token) {
      setPasswordStatus({ type: "error", message: "‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ" });
      return;
    }
    if (!currentPassword || !newPassword) {
      setPasswordStatus({ type: "error", message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
      return;
    }
    if (newPassword.length < 8) {
      setPasswordStatus({ type: "error", message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
      return;
    }
    if (newPassword !== confirmPassword) {
      setPasswordStatus({ type: "error", message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô" });
      return;
    }

    try {
      setChangingPassword(true);
      showLoading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô...");
      const response = await api.changePassword(session.token, {
        currentPassword,
        newPassword,
      });
      setPasswordStatus({
        type: "success",
        message: response.message ?? "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      });
      setCurrentPassword("");
      setNewPassword("");
      setConfirmPassword("");
    } catch (err) {
      console.error(err);
      setPasswordStatus({
        type: "error",
        message: err instanceof Error ? err.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
      });
    } finally {
      hideLoading();
      setChangingPassword(false);
    }
  };

  // Onboarding tour steps
  const tourSteps = [
    {
      target: "welcome-card",
      title: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! üéâ",
      description: "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    },
    {
      target: "test-cards",
      title: "‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö üìù",
      description: "‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏Ñ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
    },
    {
      target: "results",
      title: "‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö üìä",
      description: "‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
    },
  ];

  return (
    <div className="space-y-6">
      {/* Onboarding Tour */}
      {!hasSeenTour && (
        <OnboardingTour
          steps={tourSteps}
          onComplete={markAsComplete}
          onSkip={markAsComplete}
        />
      )}

      {/* ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤ ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ */}
      <Card 
        id="welcome-card"
        className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 sm:p-8 border-0 shadow-lg"
      >
        <h1 className="text-2xl sm:text-3xl font-bold mb-3">
          ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ üëã
        </h1>
        <p className="text-lg sm:text-xl opacity-95 mb-2">
          {session?.user?.fullName || session?.user?.email?.split("@")[0] || "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"}
        </p>
        <p className="text-base opacity-90">
          ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?
        </p>
      </Card>

      {error && (
        <Alert
          variant="error"
          message={error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ"}
        />
      )}

      {/* ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ */}
      <div className="flex flex-col sm:flex-row gap-3 justify-start sm:justify-end">
        <HelpDialog
          title="‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
          content={StudentHelpContent.dashboard}
        />
        <Button
          variant="secondary"
          size="lg"
          className="w-full sm:w-auto text-base py-6 sm:py-3"
          onClick={handleExportCsv}
          disabled={isLoading}
        >
          ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV
        </Button>
        <Button
          variant="outline"
          size="lg"
          className="w-full sm:w-auto text-base py-6 sm:py-3"
          onClick={() => mutate()}
          disabled={isLoading}
        >
          üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </Button>
      </div>


      <div 
        id="test-cards"
        className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3"
      >
        {TEST_CARD_CONFIG.map((card) => {
          const latest = latestByTest[card.test];
          const numericDisplay =
            latest !== undefined ? Number(latest.derivedValue ?? latest.value) : undefined;
          const hasNumericDisplay =
            typeof numericDisplay === "number" && Number.isFinite(numericDisplay);
          const formattedValue = hasNumericDisplay
            ? formatNumber(
                numericDisplay,
                card.decimals ?? (Number.isInteger(numericDisplay) ? 0 : 2),
              )
            : null;
          const rawValue = latest !== undefined ? Number(latest.value) : undefined;
          const showRawValue =
            Boolean(
              card.rawUnit &&
                typeof latest?.derivedValue === "number" &&
                typeof rawValue === "number" &&
                Number.isFinite(rawValue) &&
                latest.derivedValue !== rawValue,
            );
          const formattedRawValue =
            showRawValue && typeof rawValue === "number"
              ? formatNumber(
                  rawValue,
                  card.rawDecimals ?? (Number.isInteger(rawValue) ? 0 : 2),
                )
              : null;
          const recordedLabel = latest
            ? safeFormatDate(latest.recordedAt, "d MMM yyyy HH:mm", "-")
            : undefined;

          return (
            <Card
              key={card.test}
              className={cn(
                "group cursor-pointer border-2 p-5 sm:p-6 transition-all duration-200 hover:shadow-lg",
                card.hoverBorder,
              )}
              onClick={() => handleNavigateToTest(card.test)}
            >
              {/* ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô */}
              <div className="mb-5 flex items-center space-x-4">
                <div
                  className={cn(
                    "flex h-16 w-16 sm:h-14 sm:w-14 items-center justify-center rounded-2xl bg-gradient-to-r shadow-sm transition-all duration-200 group-hover:scale-105",
                    card.iconGradient,
                  )}
                >
                  <span className="text-3xl sm:text-2xl">{card.icon}</span>
                </div>
                <div>
                  <h3 className="text-lg sm:text-base font-bold text-primary">{card.title}</h3>
                  <p className="text-sm text-muted">{card.subtitle}</p>
                </div>
              </div>

              {latest ? (
                <div className="rounded-2xl border-2 border-border/50 bg-surface px-5 py-4 text-left mb-4">
                  <p className="text-sm text-muted mb-2">‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</p>
                  {formattedValue ? (
                    <p className="text-3xl sm:text-2xl font-bold text-primary">
                      {formattedValue}
                      {card.unit ? (
                        <span className="ml-2 text-base font-medium text-muted">{card.unit}</span>
                      ) : null}
                    </p>
                  ) : (
                    <p className="text-2xl font-bold text-primary">-</p>
                  )}
                  {showRawValue && formattedRawValue ? (
                    <p className="mt-2 text-sm text-muted">
                      ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ {formattedRawValue} {card.rawUnit}
                    </p>
                  ) : null}
                  <div className="mt-3 pt-3 border-t border-border/30">
                    <p className="text-sm font-medium text-primary mb-1">
                      ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: <span className="font-bold">{latest.evaluation || "-"}</span>
                    </p>
                    <p className="text-xs text-muted">
                      ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {recordedLabel}
                    </p>
                  </div>
                </div>
              ) : (
                <div className="rounded-2xl border-2 border-dashed border-border/50 bg-surface/50 px-5 py-6 text-center mb-4">
                  <p className="text-base text-muted font-medium">
                    ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </p>
                  <p className="text-sm text-muted mt-1">
                    ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                  </p>
                </div>
              )}

              <Button
                variant="secondary"
                size="lg"
                className="w-full text-base py-6 sm:py-3 font-semibold"
                onClick={(event) => {
                  event.stopPropagation();
                  handleNavigateToTest(card.test);
                }}
              >
                {latest ? "üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà" : "‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö"}
              </Button>
            </Card>
          );
        })}

        {/* ‡∏Å‡∏≤‡∏£‡πå‡∏î: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ */}
        <Card
          className={cn(
            "group cursor-pointer border-2 p-5 sm:p-6 transition-all duration-200 hover:shadow-lg",
            "hover:border-blue-500/20",
          )}
          onClick={() => router.push("/tests/body-measurements")}
        >
          <div className="mb-5 flex items-center space-x-4">
            <div className="flex h-16 w-16 sm:h-14 sm:w-14 items-center justify-center rounded-2xl bg-gradient-to-r from-blue-500/20 to-blue-600/20 shadow-sm transition-all duration-200 group-hover:scale-105">
              <span className="text-3xl sm:text-2xl">üìè</span>
            </div>
            <div>
              <h3 className="text-lg sm:text-base font-bold text-primary">‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢</h3>
              <p className="text-sm text-muted">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å 19 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠-‡πÄ‡∏≠‡∏ß-‡∏™‡∏∞‡πÇ‡∏û‡∏Å ‡∏Ø‡∏•‡∏Ø</p>
            </div>
          </div>

          <div className="rounded-2xl border-2 border-dashed border-border/50 bg-surface/50 px-5 py-6 text-center mb-4">
            <p className="text-base text-muted font-medium">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï</p>
            <p className="text-sm text-muted mt-1">‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô</p>
          </div>

          <Button
            variant="secondary"
            size="lg"
            className="w-full text-base py-6 sm:py-3 font-semibold"
            onClick={(event) => {
              event.stopPropagation();
              router.push("/tests/body-measurements");
            }}
          >
            üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
          </Button>
        </Card>
      </div>

      {/* ‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô */}
      <div id="results" className="space-y-4">
        <h2 className="text-xl sm:text-2xl font-bold text-gray-900">üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h2>
        {isLoading && !dashboardData ? (
          <LoadingState message="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..." />
        ) : !hasTestData ? (
          <EmptyStateEnhanced
            icon="üìù"
            title="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
            description="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤"
            actionLabel="‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏£‡∏Å"
            onAction={() => handleNavigateToTest("bmi")}
            secondaryActionLabel="‡∏î‡∏π‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠"
            onSecondaryAction={() => router.push("/help")}
          />
        ) : (
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            {STUDENT_TEST_ORDER.map((test) => {
              const latest = latestByTest[test];
              return (
                <Card key={test} className="p-6 flex flex-col gap-3">
                  <div className="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                    <div>
                      <h3 className="text-base font-semibold text-primary">{formatTestName(test)}</h3>
                      <p className="text-xs text-muted">{safeFormatDate(latest?.recordedAt)}</p>
                    </div>
                    <div className="flex items-center sm:justify-end">
                      {latest ? (
                        <EvaluationBadge value={latest.evaluation} />
                      ) : (
                        <span className="text-xs text-muted">-</span>
                      )}
                    </div>
                  </div>
                  {latest ? (
                    <div>
                      <p className="text-3xl font-semibold text-primary">
                        {formatNumber(latest.derivedValue ?? latest.value)}
                      </p>
                      <p className="text-xs text-muted">‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ {formatNumber(latest.value)}</p>
                    </div>
                  ) : (
                    <p className="text-sm text-muted">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ</p>
                  )}
                  <Button
                    variant="ghost"
                    size="sm"
                    className="self-stretch sm:self-start"
                    onClick={() => handleNavigateToTest(test)}
                  >
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
                  </Button>
                </Card>
              );
            })}
          </div>
        )}
      </div>

      {/* ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" ‡πÅ‡∏•‡∏∞ "‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤" - ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô */}

      {/* ‡∏•‡∏ö Progress Insights ‡πÅ‡∏•‡∏∞ Focus Areas ‡∏≠‡∏≠‡∏Å - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ */}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ */}
      {nextActions.length > 0 && (
        <div className="space-y-4">
          <h2 className="text-lg font-semibold text-gray-900">üìå ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ</h2>
          <div className="grid gap-3 sm:grid-cols-2">
            {nextActions.map((item, index) => (
              <Card 
                key={`${item.title}-${index}`}
                className="p-5 hover:shadow-md transition-shadow cursor-pointer"
                onClick={item.onClick}
              >
                <p className="font-semibold text-primary text-base mb-2">{item.title}</p>
                <p className="text-sm text-muted mb-4">{item.description}</p>
                <Button variant="secondary" size="sm" className="w-full">
                  {item.cta}
                </Button>
              </Card>
            ))}
          </div>
        </div>
      )}

      <div className="space-y-4">
        <h2 className="text-xl font-semibold text-gray-900">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h2>
        <Card className="p-6">
          <p className="text-sm text-muted mb-4">
            ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ú‡∏™‡∏°‡∏Å‡∏±‡∏ô
          </p>
          {passwordStatus && (
            <Alert variant={passwordStatus.type === "success" ? "info" : "error"} message={passwordStatus.message} className="mb-4" />
          )}
          <form onSubmit={handlePasswordChange} className="grid gap-4 md:grid-cols-2">
            <div className="md:col-span-2">
              <label className="mb-1 block text-xs font-medium text-primary">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</label>
              <Input
                type="password"
                value={currentPassword}
                onChange={(event) => setCurrentPassword(event.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
                required
              />
            </div>
            <div>
              <label className="mb-1 block text-xs font-medium text-primary">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
              <Input
                type="password"
                value={newPassword}
                onChange={(event) => setNewPassword(event.target.value)}
                placeholder="‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                required
                minLength={8}
              />
            </div>
            <div>
              <label className="mb-1 block text-xs font-medium text-primary">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
              <Input
                type="password"
                value={confirmPassword}
                onChange={(event) => setConfirmPassword(event.target.value)}
                placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                required
              />
            </div>
            <div className="md:col-span-2 flex items-center justify-end gap-3">
              <Button type="submit" loading={changingPassword} disabled={changingPassword}>
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
              </Button>
            </div>
          </form>
        </Card>
      </div>

      <div className="space-y-4">
        <h2 className="text-xl font-semibold text-gray-900">‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h2>
        <Card className="p-6">
          <div className="flex flex-col gap-2 text-sm text-muted">
            <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏û‡∏•‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏π‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</p>
            <p>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
            <div>
              <Button variant="ghost" onClick={handleNavigateToStandards}>
                ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏π‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
}
